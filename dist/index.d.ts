import type MessageParameters from "./types";
type Flatten<T, Key extends keyof T = keyof T> = Key extends string ? T[Key] extends Record<string, unknown> ? `${Key}.${Flatten<T[Key]>}` : `${Key}` : never;
type MetaDataKeys = "name" | "real";
export type TranslationKey = Exclude<Flatten<typeof import("./translations/en-GB.json")>, MetaDataKeys>;
export declare const locales: readonly ["en-GB"];
export declare const defaultLocale = "en-GB";
export type Locale = typeof locales[number];
export declare const translations: Record<"en-GB", {
    name: string;
    real: boolean;
    HELLO_WORLD: string;
    EN_GB: string;
    EN_US: string;
    ES_ES: string;
    YES: string;
    NO: string;
    DELETE: string;
    CANCEL: string;
    BACK: string;
    SKIP: string;
    CONTINUE: string;
    NEXT: string;
    END: string;
    NONE: string;
    NOT_SET: string;
    ORIGINAL_MESSAGE: string;
    REPLYING_TO_USER: string;
    REFERENCED_MESSAGE: string;
    SENT_A_STICKER: string;
    STARBOARD_MESSAGE_IMAGE: string;
    STARBOARD_MESSAGE_IMAGE_N: string;
    STARBOARD_MESSAGE_VIDEO: string;
    STARBOARD_MESSAGE_VIDEO_N: string;
    STARBOARD_MESSAGE_FILE: string;
    STARBOARD_MESSAGE_FILE_N: string;
    STARBOARD_MESSAGE_SPOILER: string;
}>;
export default function translate<T extends TranslationKey>(key: T, locale: Locale, options?: T extends keyof MessageParameters ? MessageParameters[T] : undefined): string;
export { translate };
export declare function pickTranslation<T extends TranslationKey>(keyOptions: Record<T, any>, locale: Locale, options?: T extends keyof MessageParameters ? MessageParameters[T] : undefined): string | null;
export type Translatable = (locale: Locale) => string;
export declare function wrapTranslation<T extends TranslationKey>(key: T, options?: T extends keyof MessageParameters ? MessageParameters[T] : undefined): Translatable;
